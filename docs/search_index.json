[["miscellania.html", "Chapter 7 Miscellania 7.1 Representation of predicted disordered amino acid data", " Chapter 7 Miscellania Here you can find out how we implement the visualization of different issues in Python. 7.1 Representation of predicted disordered amino acid data We import some libraries. import matplotlib.pyplot as plt import pandas as pd import seaborn as sns Now we read a csv file with disordered data and few other characteristics of each protein. df_disorder = pd.read_csv(&quot;/Users/esmeralda/Documents/TFM/article/disorder_data.csv&quot;, sep=&quot;;&quot;) df_disorder[&#39;Length&#39;] = pd.to_numeric(df_disorder[&#39;Length&#39;], errors=&#39;coerce&#39;) We define for the following plots in Seaborn: The style The palette # Set Seaborn style to match a similar style to Plotly sns.set(rc={&#39;axes.facecolor&#39;: &#39;white&#39;, &#39;axes.edgecolor&#39;: &#39;white&#39;, &quot;axes.grid&quot;: True, &quot;grid.linestyle&quot;: &quot;--&quot;, &quot;font.size&quot;: 15, &quot;axes.labelsize&quot;: 15, &quot;xtick.labelsize&quot;: 12, &quot;ytick.labelsize&quot;: 12, &#39;xtick.bottom&#39;: True, &#39;figure.facecolor&#39;: &#39;white&#39;, &#39;xtick.top&#39;: False, &#39;xtick.bottom&#39;: False, &#39;ytick.left&#39;: True, &#39;ytick.right&#39;: False, &quot;grid.color&quot;: &quot;#DFDFDF&quot;, &#39;font.sans-serif&#39;: &#39;Helvetica&#39;}) safe_colorblind_palette = [&quot;#E69F00&quot;, &quot;#6D0000&quot;, &quot;#56B4E9&quot;, &quot;#97E4CF&quot;, &quot;#F0E442&quot;, &quot;#0F425F&quot;, &quot;#D55E00&quot;, &quot;#000877&quot;, &quot;#CA4E93&quot;, &quot;#ABB6D3&quot;, &quot;#D9F221&quot;] # Create a figure and axes plt.figure(figsize=(10, 6)) ax = sns.boxplot(data=df_disorder[df_disorder[&quot;Movement protein&quot;] == &quot;Movement protein&quot;], x=&quot;Taxonomy origin&quot;, y=&quot;Percentage&quot;, color=&quot;white&quot;, boxprops=dict(edgecolor=&#39;black&#39;), whiskerprops=dict(color=&#39;black&#39;), medianprops=dict(color=&#39;black&#39;), capprops=dict(linewidth=2), width=0.7, linewidth=0.6) marker_style = [] for i in df_disorder[&quot;Movement protein&quot;]: if i == &#39;o&#39;: marker_style.append(&#39;o&#39;) else: marker_style.append(&#39;X&#39;) We can plot disorder data classified by taxonomic families. ax = sns.swarmplot(data=df_disorder, x=&quot;Taxonomy origin&quot;, y=&quot;Percentage&quot;, color=&quot;black&quot;, palette=safe_colorblind_palette, size=7, marker=&quot;X&quot;) ax = sns.swarmplot(data=df_disorder[df_disorder[&quot;Movement protein&quot;] == &quot;Movement protein&quot;], x=&quot;Taxonomy origin&quot;, y=&quot;Percentage&quot;, color=&quot;black&quot;, palette=safe_colorblind_palette, marker=&quot;o&quot;, size=7) # Set plot labels and title plt.xlabel(&quot;Genus&quot;) plt.ylabel(&quot;% predicted disodered residues&quot;) # Adjust plot layout plt.xticks(rotation=45) plt.tight_layout() plt.savefig(&quot;percentage_taxonomy.pdf&quot;, format=&quot;pdf&quot;) # Display the plot plt.show() In this case, we plot all the proteins only divided by if their corresponding open reading frames are overprinted. safe_colorblind_palette_2 = [&quot;#054C6F&quot;, &quot;#44AA99&quot;] # Create a figure and axes plt.figure(figsize=(5, 6)) ax = sns.boxplot(data=df_disorder[df_disorder[&quot;Movement protein&quot;] == &quot;Movement protein&quot;], x=&quot;Overlap&quot;, y=&quot;Percentage&quot;, color=&quot;white&quot;, boxprops=dict(edgecolor=&#39;black&#39;), whiskerprops=dict(color=&#39;black&#39;), medianprops=dict(color=&#39;black&#39;), capprops=dict(linewidth=2), width=0.7, linewidth=0.6) ax = sns.swarmplot(data=df_disorder, x=&quot;Overlap&quot;, y=&quot;Percentage&quot;, color=&quot;black&quot;, palette=safe_colorblind_palette_2, marker=&quot;X&quot;, size=7) ax = sns.swarmplot(data=df_disorder[df_disorder[&quot;Movement protein&quot;] == &quot;Movement protein&quot;], x=&quot;Overlap&quot;, y=&quot;Percentage&quot;, color=&quot;black&quot;, palette=safe_colorblind_palette_2, marker=&quot;o&quot;, size=7) # Set plot labels and title plt.xlabel(&quot;&quot;) plt.ylabel(&quot;% predicted disodered residues&quot;) # Adjust plot layout plt.xticks(rotation=45) plt.tight_layout() plt.savefig(&quot;percentage_overprinted.pdf&quot;, format=&quot;pdf&quot;) # Display the plot plt.show() Then, we can also scatter the data, using the length of our proteins. plt.figure(figsize=(8, 6)) markers = {&quot;Movement protein&quot;: &quot;o&quot;, &quot;p19&quot;: &quot;X&quot;} sns.scatterplot(data=df_disorder, x=&#39;Length&#39;, y=&#39;Disordered residues&#39;, hue=&#39;Taxonomy origin&#39;, style=&quot;Movement protein&quot;, markers=markers, palette=safe_colorblind_palette, s=40) plt.legend([],[], frameon=False) plt.xlabel(&quot;Length&quot;) plt.ylabel(&quot;Predicted disordered residues&quot;) plt.savefig(&quot;disorder_scatter_taxonomy_legend.pdf&quot;, format=&quot;pdf&quot;) plt.show() Last, but not least, the previous plot can be only colored by the fact of if they were overprinted or not. plt.figure(figsize=(8, 6)) ax = sns.scatterplot(data=df_disorder, x=&#39;Length&#39;, y=&#39;Disordered residues&#39;, hue=&#39;Overlap&#39;,style=&quot;Movement protein&quot;, palette=safe_colorblind_palette_2, s=40) plt.xlabel(&quot;Length&quot;) plt.ylabel(&quot;Predicted disordered residues&quot;) plt.legend([],[], frameon=False) plt.savefig(&quot;disorder_scatter_overlap_legend.pdf&quot;, format=&quot;pdf&quot;) plt.show() "]]
